name: GitHub Actions Demo
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      account:
        type: choice
        description: Select account type
        required: true
        options:
        - dev
        - test
      account-number:
        required: false
        description: account number
        default: '123456'
      conditional-step:
        type: boolean
        description: Include 🎉🤣 emojis
        required: false
#      environment:
#        type: environment
#        required: false
#        description: Environment to use
      branch-name:
        description: "Branch name to run the build for"
        required: false
      secret-val1:
        description: "Secret value"
        required: false

env:
  #CURRENT_BRANCH: "$([ -z '${{ github.event.inputs.branch-name }}'  ] && echo ${{ github.ref_name }} || echo ${{ github.event.inputs.branch-name }})"
  CURRENT_BRANCH: "${{ !github.event.inputs.branch-name && github.ref_name || github.event.inputs.branch-name }}"
  SECRET_VAL1: "$([ -z '${{ github.event.inputs.secret-val1 }}'  ] && echo ${{ secrets.VAL1 }} || echo '${{ github.event.inputs.secret-val1 }}')"
  B: 'b env'

jobs:
  build:
    runs-on: ubuntu-latest # [self-hosted, Linux] #
    name: Build and test demo job
    env:
      A: 'b'
    defaults:
      run:
        working-directory: '.'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Setep env
        run: |
          echo "B='b env val'" >> $GITHUB_ENV

      - if: always()
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."

      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "Event path ${{ github.event_path }}"
      - run: echo "Job ${{ github.job }}"
      - run: echo "Ref name ${{ github.ref_name }}"
      - run: echo "Ref type ${{ github.ref_type }}"
      - run: echo "Run attempt ${{ github.run_attempt }}"
      - run: echo "Run number ${{ github.run_number }}"
      # - run: echo " ${{ github. }}"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          # ls -alR ${{ github.workspace }}
          echo ${{ github.event.inputs.account }}
          echo ${{ github.event.inputs.account-number }}
          echo ${{ github.event.inputs.environment }}
          echo ${{ env.CURRENT_BRANCH }}
          echo ${{ github.event.inputs.conditional-step == 'true' && 'cond-a' || 'cond-b' }}

      - run: echo "🍏 This job's status is ${{ job.status }}."
      - id: foo
        name: Run sub action
        uses: ./.github/workflows/action1 # actions/hello-world-composite-action@v1 # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
        with:
          input-value: 'Sub action input value'
      - run: echo "Sub action return value ${{ steps.foo.outputs.value1 }}"
        shell: bash
      - name: Add variables to github path and env
        shell: bash
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "DYNAMIC_ENV_VAR=${{ env.B }}" >> $GITHUB_ENV

      - name: Print environment
        run: printenv
      - run: echo "Github path ${{ github.path }}"
      - run: echo "Secret VAL1 ${{ secrets.VAL1 }}"
      - run: echo "Secret env.VAL1 ${{ env.SECRET_VAL1 }}"
        working-directory: '.' # command working directory

      - name: Create artifact
        run: echo "1st artifact" > file.txt

      - name: Upload artifact  
        uses: actions/upload-artifact@v3
        if: success() # failure()
        with:
          name: my-artifact
          if-no-files-found: error
          retention-days: 5
          path: |
            file.txt
            # path/output/bin/
            # path/output/test-results
            # !path/**/*.tmp

  resusableW:
    needs: build
    name: Reusable job call
    uses: ./.github/workflows/reusable.yaml
    with:
      image: 'img1 value'
    secrets:
      secret1: ${{ secrets.VAL1 }}

  reusableWOut:
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    name: Reusable job out
    needs: [resusableW]
    continue-on-error: true
    permissions:
      deployments: write # create deployment
      contents: read # access repo
      actions: read # is this required ?
    strategy:
      matrix:
        version: [10, 12]
    steps:
      - run: echo ${{ needs.resusableW.outputs.out1 }} ${{ matrix.version }}
        name: Print reusable output
        shell: bash

  deploy:
    runs-on: ubuntu-latest
    name: Deployment job
    needs: [reusableWOut]
    environment:
      name: dev
      url: https://google.com
    steps:

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: my-artifact
          path: out/file.txt

      - name: Print artifact contents
        shell: bash
        timeout-minutes: 1
        run: |
          echo $(cat ./out/file.txt) 

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref_name }}-${{ github.sha }} # will fail deployment if tag exists (tag should change on re-run)
          release_name: Release ${{ github.run_number }}-${{ github.run_attempt }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: release-${{ github.run_attempt }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
#          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
#          role-duration-seconds: 1200
#          role-session-name: MySessionName

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          #logs: https://github.com/${{ github.repository }}/${{ github.sha }}/checks 

