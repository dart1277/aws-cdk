name: GitHub Actions Demo
on:
  push:
    branches:
      - main
#    tags:
#      - '**' # allows to trigger workflow on tag push
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - closed
    branches:
      - main
#    tags:
#      - '**' # filters pr workflow runs

  # workflow_run:
  #   types:
  #     - completed # requested
  #   workflows:
  #     - "0 Workflow"
  #   branches:
  #     - "main"

  # on GitHub a good catch all branch protection pattern is **/*
  workflow_dispatch:
    inputs:
      account:
        type: choice
        description: Select account type
        required: true
        options:
        - dev
        - test
      account-number:
        required: false
        description: account number
        default: '123456'
      conditional-step:
        type: boolean
        description: Include 🎉🤣 emojis
        required: false
#      environment:
#        type: environment
#        required: false
#        description: Environment to use
      branch-name:
        description: "Branch name to run the build for"
        required: false
      secret-val1:
        description: "Secret value"
        required: false

env:
  #CURRENT_BRANCH: "$([ -z '${{ github.event.inputs.branch-name }}'  ] && echo ${{ github.ref_name }} || echo ${{ github.event.inputs.branch-name }})"
  CURRENT_BRANCH: "${{ !github.event.inputs.branch-name && github.ref_name || github.event.inputs.branch-name }}"
  SECRET_VAL1: "$([ -z '${{ github.event.inputs.secret-val1 }}'  ] && echo ${{ secrets.VAL1 }} || echo '${{ github.event.inputs.secret-val1 }}')"
  B: 'b env'
  CURRENT_REF: ${{ github.ref }}
  LEGACY_ENV: ${{ github.ref == 'refs/heads/main' && secrets.A_SECRET }}

jobs:
  build:
    runs-on: ubuntu-latest # [self-hosted, Linux] #
    name: Build and test demo job
    env:
      A: 'b'
    defaults:
      run:
        working-directory: '.'
    outputs:
      jobvar1: ${{ steps.stp1id.outputs.var1 }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Setup env
        run: |
          echo "B='b env val'" >> $GITHUB_ENV

      - name: Dont fail if command fails
        run: | # 1st and 2nd lines can be repeated multiple times
          [[ -z "${{ env.BB }}" ]] \
          && echo "MY_ENV_VAR=${{ env.BB }}" >> $GITHUB_ENV \
          || echo "Feature not available" # returns 0 exit status if previous commands fail, colon can be used instead ':' 
          

      - if: always()
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."

      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "Event path ${{ github.event_path }}"
      - run: echo "Job ${{ github.job }}"
      - run: echo "Ref name ${{ github.ref_name }}"
      - run: echo "Ref type ${{ github.ref_type }}"
      - run: echo "Run attempt ${{ github.run_attempt }}"
      - run: echo "Run number ${{ github.run_number }}"
      # - run: echo " ${{ github. }}"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - name: List files in the repository
        run: |
          # ls -alR ${{ github.workspace }}
          echo ${{ github.event.inputs.account }}
          echo ${{ github.event.inputs.account-number }}
          echo ${{ github.event.inputs.environment }}
          echo ${{ env.CURRENT_BRANCH }}
          echo ${{ github.event.inputs.conditional-step == 'true' && 'cond-a' || 'cond-b' }}

      - run: echo "🍏 This job's status is ${{ job.status }}."
      - id: foo
        name: Run sub action
        uses: ./.github/workflows/action1 # actions/hello-world-composite-action@v1 # https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
        with:
          input-value: 'Sub action input value'
      - run: echo "Sub action return value ${{ steps.foo.outputs.value1 }}"
        shell: bash
      - name: Add variables to github path and env
        shell: bash
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "DYNAMIC_ENV_VAR=${{ env.B }}" >> $GITHUB_ENV

      - name: Print environment
        run: printenv
      - run: echo "Github path ${{ github.path }}"
      - run: echo "Secret VAL1 ${{ secrets.VAL1 }}"
      - run: echo "Secret env.VAL1 ${{ env.SECRET_VAL1 }}"
        working-directory: '.' # command working directory

      - name: Create artifact
        run: echo "1st artifact" > file.txt

      - name: Upload artifact  
        uses: actions/upload-artifact@v3
        if: success() # failure()
        with:
          name: my-artifact
          if-no-files-found: error
          retention-days: 5
          path: |
            file.txt
            # path/output/bin/
            # path/output/test-results
            # !path/**/*.tmp

      - name: Set variable
        id: stp1id
        run: |
          echo "::set-output name=var1::$(echo "Step1OutputValue")"

      - name: Get variable
        run: echo "${{ steps.stp1id.outputs.var1 }}"

  cleanup-build:
    runs-on: ubuntu-latest #[self-hosted, Linux]
    needs: [build]
    if: always()
    steps:
      - name: Clean build dir
        run: |
          echo ${{ needs.build.outputs.jobvar1 }}
          [ -d  "${{ github.workspace }}" ] && sudo rm -R "${{ github.workspace }}" # && mkdir -p "${{ github.workspace }}"

  resusableW:
    needs: [cleanup-build]
    name: Reusable job call
    uses: ./.github/workflows/reusable.yaml
    with:
      image: 'img1 value'
    secrets:
      secret1: ${{ secrets.VAL1 }}

  reusableWOut:
    runs-on: ubuntu-latest #[self-hosted, Linux]
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    name: Reusable job out
    needs: [resusableW]
    continue-on-error: true
    permissions:
      deployments: write # create deployment
      contents: read # access repo
      actions: read # is this required ?
    strategy:
      matrix:
        version: [10, 12]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - run: echo ${{ needs.resusableW.outputs.out1 }} ${{ matrix.version }}
        name: Print reusable output
        shell: bash

  docker-test:
    runs-on: ubuntu-latest #[self-hosted, Linux]
    needs: [resusableW]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Docker run
        shell: bash
        run: |
          chmod -R a+w $PWD
          docker run --rm --workdir=/opt --user 3002:3002 -v $PWD:/opt python:3.9-bullseye bash -c "echo 'wtf' > ad.txt"
          ls -al
          sudo rm -R $PWD
          echo "Recreating dir $PWD"
          mkdir $PWD
          cd $PWD
          # sudo rm -R $(realpath $PWD/../)
          ls -al

  deploy:
    runs-on: ubuntu-latest #[self-hosted, Linux]
    name: Deployment job
    needs: [docker-test]
    environment:
      name: dev
      url: https://google.com
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: List files after checkout
        shell: bash
        run: |
          ls -al
          echo "Working dir $PWD"

      - name: Setup pip bin path
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Setup python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - uses: actions/cache@v3
        id: cache-venv  # name for referring later
        with:
          path: ./.venv/  # what we cache: the virtualenv
          # The cache key depends on requirements.txt
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-venv-

      - name: Install aws cli v2
        shell: bash
        run: |
          # pip install awscli --upgrade --user
          # aws --version
          sudo apt-get update -y
          sudo apt-get install curl jq unzip
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo $PWD/aws/install --update
          rm -r aws awscliv2.zip
          aws --version

      - name: Docker run
        shell: bash
        run: |
          docker run --rm --name temp-run hello-world


      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: my-artifact
          path: out/file.txt

      - name: Print artifact contents
        shell: bash
        timeout-minutes: 1
        run: |
          echo $(cat ./out/file.txt) 

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref_name }}-${{ github.run_number }}-${{ github.run_attempt }} # will fail deployment if tag exists (tag should change on re-run)
          release_name: Release ${{ github.run_number }}-${{ github.run_attempt }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: Release-env

#      - name: Configure AWS Credentials # TODO enable this
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1

#          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
#          role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
#          role-duration-seconds: 1200
#          role-session-name: MySessionName

#      - name: Update cloudfront distro
#        run: |
#          # https://stackoverflow.com/questions/42624579/update-cloudfront-configuration-using-awscli
#          CLOUDFRONT_DISTRIBUTION_ID=E2C3RNL2F4MRMQ
#          OLD_ORIGIN="origin-placeholder.dev"
#          NEW_ORIGIN="origin2-zaid.s3.us-west-2.amazonaws.com"
#          ETAG=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID | jq -r .ETag)
#          aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID | \
#          sed "s|OLD_ORIGIN|NEW_ORIGIN|g" \
#          jq '.Distribution.DistributionConfig' > config.json
#          aws cloudfront update-distribution --id $CLOUDFRONT_DISTRIBUTION_ID --distribution-config "file://config.json" --if-match $ETAG # > /dev/null
#          # aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
#          rm config.json
#
#      - name: Delete Cloudwatch logs with prefix
#        run: |
#          # docker rmi $(docker images | cut -d ' ' -f 1 | grep img-prefix)
#          # docker images | sed -E 's/\s+/ /g' | cut -d ' ' -f 3 | sed 1,5d | tr '\n' ' '
#          # s3api list-buckets --query Owner.Id --output text
#          # s3 sync s3://ab . --include=*.txt
#          # s3 cp --recursive --acl bucket-owner-full-control --metadata-directive REPLACE --region us-east-1 --profile xx s3://src1 s3://dst1
#
#          MY_PREFIX="stack-"
#          DELETE_DAYS=$(date +%s000 -d "-7 days")
#          aws logs describe-log-groups --no-paginate --log-group-name-prefix $MY_PREFIX --region us-east-1 \
#          jq --raw-output --arg time_window $DELETE_DAYS '.logGroups | .[] | select(.creationTime < ($time_window | tonumber) | .logGroupName)' \
#          | tr -d '\r' | xargs -t -I % aws logs delete-log-group --region us-east-1 --log-group-name %

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          env_url: "https://google.com/${{ github.run_number }}-${{ github.run_attempt }}"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          logs: https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks

  deployCond:
    runs-on: ubuntu-latest #[self-hosted, Linux]
    # if: ${{ startsWith(github.ref, 'refs/tags') }}
    name: Deployment job 2
    needs: [deploy]
    environment:
      name: dev
      url: https://google.com
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Print event
        shell: bash
        run: |
          echo ${{ github.event.action }}
          echo ${{ github.ref }}
          echo ${{ github.base_ref }}
          echo ${{ github.head_ref }}
          echo ${{ github.event.pull_request.head.ref }}
          echo '${{ toJSON(github.event) }}'

